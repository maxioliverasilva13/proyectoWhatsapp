name: Deploy Optimized to PROD

on:
  workflow_dispatch:
    inputs:
      deploy_app:
        description: '¿Deployar la app principal? (app.measyapp.com)'
        required: false
        type: boolean
        default: false
      db_name:
        description: 'Nombre de la empresa específica (opcional - deja vacío para deploy completo)'
        required: false
        type: string
      image_tag:
        description: 'Tag específico de imagen (opcional - usa latest por defecto)'
        required: false
        type: string
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.optimized
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --only=production

    - name: Setup SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "${SSH_PRIVATE_KEY}" > private_key
        chmod 600 private_key

    - name: Prepare server
      env:
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
      run: |
        ssh -i private_key -o StrictHostKeyChecking=no root@${DROPLET_IP} '
          # Crear red si no existe
          docker network create app-network 2>/dev/null || true
          
          # Login al registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        '

    - name: Extract Image Tag
      id: extract-tag
      run: |
        # Extraer solo el tag de la imagen construida
        FULL_TAGS="${{ needs.build-and-push.outputs.image-tag }}"
        echo "Full image tags: $FULL_TAGS"
        
        # Buscar el tag que contiene el SHA del commit (más específico)
        COMMIT_SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
        echo "Looking for tag with SHA: $COMMIT_SHA_SHORT"
        
        # Buscar línea que contenga el SHA del commit
        IMAGE_TAG=$(echo "$FULL_TAGS" | grep "$COMMIT_SHA_SHORT" | head -1 | sed 's/.*://')
        
        # Si no encuentra tag con SHA, usar el primero disponible
        if [ -z "$IMAGE_TAG" ]; then
          IMAGE_TAG=$(echo "$FULL_TAGS" | head -1 | sed 's/.*://')
        fi
        
        echo "Selected tag: $IMAGE_TAG"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

    - name: Execute Optimized Deployment
      env:
        POSTGRES_USER_GLOBAL: ${{ secrets.POSTGRES_USER_GLOBAL }}
        POSTGRES_PASSWORD_GLOBAL: ${{ secrets.POSTGRES_PASSWORD_GLOBAL }}
        POSTGRES_DB_GLOBAL: ${{ secrets.POSTGRES_DB_GLOBAL }}
        POSTGRES_GLOBAL_DB_HOST: ${{ secrets.POSTGRES_GLOBAL_DB_HOST }}
        POSTGRES_GLOBAL_DB_PORT: ${{ secrets.POSTGRES_GLOBAL_DB_PORT }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        OPEN_AI_TOKEN: ${{ secrets.OPEN_AI_TOKEN }}
        ASSISTANT_ID: ${{ secrets.ASSISTANT_ID }}
        DROPLET_IP: ${{ secrets.DROPLET_IP }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
        FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
        RESEND_KEY: ${{ secrets.RESEND_KEY }}
        DEEPSEEK_TOKEN: ${{ secrets.DEEPSEEK_TOKEN }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        GITHUB_SHA: ${{ github.sha }}
        REGISTRY: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        BUILT_IMAGE_TAGS: ${{ needs.build-and-push.outputs.image-tag }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        SUPABASE_BUCKET: ${{ secrets.SUPABASE_BUCKET }}
        TOKEN_CONNECT_GIT: ${{ secrets.TOKEN_CONNECT_GIT }}
        GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
        GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
        DROPLET_USER: ${{ secrets.DROPLET_USER }}
      run: |
        # Deploy de la app principal si está marcado
        if [ "${{ github.event.inputs.deploy_app }}" == "true" ]; then
          echo "🏠 Desplegando app principal (app.measyapp.com)..."
          node deployAppOptimized.js
        fi
        
        # Deploy de empresas
        if [ -n "${{ github.event.inputs.db_name }}" ]; then
          echo "🎯 Deploy específico para empresa: ${{ github.event.inputs.db_name }}"
          if [ -n "${{ github.event.inputs.image_tag }}" ] && [ "${{ github.event.inputs.image_tag }}" != "latest" ]; then
            echo "📦 Usando tag específico: ${{ github.event.inputs.image_tag }}"
            node deployOptimized.js "${{ github.event.inputs.db_name }}" "${{ github.event.inputs.image_tag }}"
          else
            node deployOptimized.js "${{ github.event.inputs.db_name }}"
          fi
        elif [ "${{ github.event.inputs.deploy_app }}" != "true" ]; then
          echo "🌐 Deploy completo para todas las empresas"
          node deployOptimized.js
        fi

    - name: Cleanup
      if: always()
      run: |
        rm -f private_key
        rm -f .env.*

    - name: Deploy Summary
      if: always()
      run: |
        echo "## 🚀 Deploy Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ needs.build-and-push.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        
        # App principal
        if [ "${{ github.event.inputs.deploy_app }}" == "true" ]; then
          echo "- **App Principal**: ✅ Desplegada" >> $GITHUB_STEP_SUMMARY
          echo "- **App URL**: https://app.measyapp.com" >> $GITHUB_STEP_SUMMARY
          echo "- **App Health**: https://app.measyapp.com/health" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **App Principal**: ⏭️ Omitida" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Empresas
        if [ -n "${{ github.event.inputs.db_name }}" ]; then
          echo "- **Deploy Type**: Específico para empresa \`${{ github.event.inputs.db_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://${{ github.event.inputs.db_name }}.measyapp.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: https://${{ github.event.inputs.db_name }}.measyapp.com/health" >> $GITHUB_STEP_SUMMARY
        else
          if [ "${{ github.event.inputs.deploy_app }}" != "true" ]; then
            echo "- **Deploy Type**: Completo (todas las empresas)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Deploy Type**: Solo app principal" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [ -n "${{ github.event.inputs.image_tag }}" ] && [ "${{ github.event.inputs.image_tag }}" != "latest" ]; then
          echo "- **Custom Tag**: ${{ github.event.inputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
        fi
