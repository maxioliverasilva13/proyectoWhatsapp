services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      ENV: production
      SUBDOMAIN: ${SUBDOMAIN}
      VIRTUAL_HOST: ${VIRTUAL_HOST}
      POSTGRES_USER_GLOBAL: ${POSTGRES_USER_GLOBAL}
      POSTGRES_PASSWORD_GLOBAL: ${POSTGRES_PASSWORD_GLOBAL}
      POSTGRES_GLOBAL_DB_HOST: ${POSTGRES_GLOBAL_DB_HOST}
      POSTGRES_DB_GLOBAL: ${POSTGRES_DB_GLOBAL}
      POSTGRES_GLOBAL_DB_PORT: ${POSTGRES_GLOBAL_DB_PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    labels:
      - traefik.enable=true
      - traefik.http.routers.${SUBDOMAIN}-router.rule=Host(`${VIRTUAL_HOST}`)
      - traefik.http.routers.${SUBDOMAIN}-router.entrypoints=web
      - traefik.http.services.${SUBDOMAIN}-service.loadbalancer.server.port=3000
    depends_on:
      - db
    networks:
      - app-network
    restart: always
    container_name: ${SUBDOMAIN}-app
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - globaldb-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always
    container_name: ${SUBDOMAIN}-db
networks:
  app-network:
    external: true
volumes:
  globaldb-data:
